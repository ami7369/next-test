# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;


    include /etc/nginx/conf.d/*.conf;

    # server {
    #     server_name  sampletttt.com;
    #     root         /usr/share/nginx/html;

    #     include /etc/nginx/default.d/*.conf;

    #     error_page 404 /404.html;
    #     location = /404.html {
    #     }

    #     error_page 500 502 503 504 /50x.html;
    #     location = /50x.html {
    #     }
    server {
        server_name  sampletttt.com;

        # ログの設定
        access_log /var/log/nginx/nextjs_access.log combined buffer=512k flush=1m;
        error_log /var/log/nginx/nextjs_error.log debug;

        # ルートパスへのリクエストを処理するロケーション
        location / {
            # ポート3001で動作するNext.jsアプリケーションにプロキシ
            proxy_pass http://127.0.0.1:3001;
            # HTTP/1.1を使用
            proxy_http_version 1.1;
            # WebSocketサポートのための設定
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            # オリジナルのホスト名を維持
            proxy_set_header Host $host;
            # クライアントの実IPアドレスを転送
            proxy_set_header X-Real-IP $remote_addr;
            # プロキシチェーン内のIPアドレスを保持
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 使用されているプロトコル(http/https)を転送
            proxy_set_header X-Forwarded-Proto $scheme;

            # タイムアウト設定
            proxy_connect_timeout 60s; # 接続タイムアウト
            proxy_send_timeout 60s;    # 送信タイムアウト
            proxy_read_timeout 60s;    # 読み取りタイムアウト
        }

        # Next.jsの静的ファイルを処理するロケーション
        location /_next/static/ {
            proxy_pass http://localhost:3002;
            # キャッシュをバイパスするための設定
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Host $host;
            # 静的ファイルを1年間キャッシュ
            expires 365d;
            # アクセスログを無効化して負荷軽減
            access_log off;
        }
        
        # サブディレクトリへのリクエストを処理するロケーション
        location /subdirectory {
            # ポート3002で動作するNext.jsアプリケーションにプロキシ
            proxy_pass http://127.0.0.1:3002;
            proxy_http_version 1.1;
            # WebSocketサポートの設定
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            # 各種ヘッダー設定
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # サブディレクトリ内の静的ファイルを処理するロケーション
        location /subdirectory/_next/static/ {
            proxy_pass http://localhost:3001;
            # キャッシュ関連の設定
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Host $host;
            # 静的ファイルの長期キャッシュ
            expires 365d;
            # アクセスログを無効化
            access_log off;
        }
        error_page 404 /404.html;
        location = /404.html {
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }
        location /isr {
  #省略
        }


}



    server {
    if ($host = dev.gokakunin.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        listen       80;
        listen       [::]:80;
        server_name  dev.gokakunin.net;
    return 404; # managed by Certbot


    }

    client_max_body_size 0;


    server {
    if ($host = stg.dev.gokakunin.net) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        server_name  stg.dev.gokakunin.net;
    listen 80;
    return 404; # managed by Certbot


}}
                                         